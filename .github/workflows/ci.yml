name: Sample Python API CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: sample-python-api

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fastapi uvicorn pytest pytest-cov httpx prometheus-client
    
    - name: Run tests
      run: |
        pytest -v --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting
      run: |
        black --check .
    
    - name: Check import sorting
      run: |
        isort --check-only --profile black .

  build:
    needs: [test, lint]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.11-slim
        
        WORKDIR /app
        
        COPY main.py .
        RUN pip install fastapi uvicorn
        
        EXPOSE 8000
        
        CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
        EOF
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/sanjaysk43/sample-python-api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        no-cache: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    
    - name: Test Docker image
      run: |
        # Extract the first tag from the metadata output
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "Testing image: $IMAGE_TAG"
        
        # Debug: Check what's installed in the image
        echo "Checking installed packages..."
        docker run --rm $IMAGE_TAG pip list
        
        # Test container can start and run basic command
        echo "Testing container startup..."
        docker run --rm $IMAGE_TAG python -c "import prometheus_client; print('prometheus_client imported successfully')"
        docker run --rm $IMAGE_TAG python -c "import main; print('Import successful')"
        
        # Run container in background
        echo "Starting container..."
        docker run -d -p 8000:8000 --name test-api $IMAGE_TAG
        
        # Wait for startup and check logs
        sleep 15
        echo "Container logs:"
        docker logs test-api
        
        # Check if container is running
        if docker ps | grep test-api; then
          echo "Container is running successfully"
          
          # Test health endpoint with retries
          for i in {1..10}; do
            if curl -f http://localhost:8000/health; then
              echo "Health check passed on attempt $i"
              break
            else
              echo "Health check attempt $i failed, retrying..."
              sleep 2
            fi
            if [ $i -eq 10 ]; then
              echo "Health check failed after 10 attempts"
              docker logs test-api
              exit 1
            fi
          done
        else
          echo "Container failed to start or exited"
          docker logs test-api
          exit 1
        fi
        
        # Cleanup
        docker stop test-api
        docker rm test-api

  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying Sample Python API to staging..."
        echo "API available at: https://sample-python-api-staging.example.com"
        echo "Health check: https://sample-python-api-staging.example.com/health"
        echo "API docs: https://sample-python-api-staging.example.com/docs"
